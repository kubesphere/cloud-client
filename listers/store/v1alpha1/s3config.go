/*
Copyright 2021 The Kubesphere Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/kubesphere/cloud-client/apis/store/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// S3ConfigLister helps list S3Configs.
// All objects returned here must be treated as read-only.
type S3ConfigLister interface {
	// List lists all S3Configs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.S3Config, err error)
	// S3Configs returns an object that can list and get S3Configs.
	S3Configs(namespace string) S3ConfigNamespaceLister
	S3ConfigListerExpansion
}

// s3ConfigLister implements the S3ConfigLister interface.
type s3ConfigLister struct {
	indexer cache.Indexer
}

// NewS3ConfigLister returns a new S3ConfigLister.
func NewS3ConfigLister(indexer cache.Indexer) S3ConfigLister {
	return &s3ConfigLister{indexer: indexer}
}

// List lists all S3Configs in the indexer.
func (s *s3ConfigLister) List(selector labels.Selector) (ret []*v1alpha1.S3Config, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.S3Config))
	})
	return ret, err
}

// S3Configs returns an object that can list and get S3Configs.
func (s *s3ConfigLister) S3Configs(namespace string) S3ConfigNamespaceLister {
	return s3ConfigNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// S3ConfigNamespaceLister helps list and get S3Configs.
// All objects returned here must be treated as read-only.
type S3ConfigNamespaceLister interface {
	// List lists all S3Configs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.S3Config, err error)
	// Get retrieves the S3Config from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.S3Config, error)
	S3ConfigNamespaceListerExpansion
}

// s3ConfigNamespaceLister implements the S3ConfigNamespaceLister
// interface.
type s3ConfigNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all S3Configs in the indexer for a given namespace.
func (s s3ConfigNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.S3Config, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.S3Config))
	})
	return ret, err
}

// Get retrieves the S3Config from the indexer for a given namespace and name.
func (s s3ConfigNamespaceLister) Get(name string) (*v1alpha1.S3Config, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("s3config"), name)
	}
	return obj.(*v1alpha1.S3Config), nil
}
