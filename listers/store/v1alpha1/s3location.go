/*
Copyright 2021 The Kubesphere Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/kubesphere/cloud-client/apis/store/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// S3LocationLister helps list S3Locations.
// All objects returned here must be treated as read-only.
type S3LocationLister interface {
	// List lists all S3Locations in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.S3Location, err error)
	// S3Locations returns an object that can list and get S3Locations.
	S3Locations(namespace string) S3LocationNamespaceLister
	S3LocationListerExpansion
}

// s3LocationLister implements the S3LocationLister interface.
type s3LocationLister struct {
	indexer cache.Indexer
}

// NewS3LocationLister returns a new S3LocationLister.
func NewS3LocationLister(indexer cache.Indexer) S3LocationLister {
	return &s3LocationLister{indexer: indexer}
}

// List lists all S3Locations in the indexer.
func (s *s3LocationLister) List(selector labels.Selector) (ret []*v1alpha1.S3Location, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.S3Location))
	})
	return ret, err
}

// S3Locations returns an object that can list and get S3Locations.
func (s *s3LocationLister) S3Locations(namespace string) S3LocationNamespaceLister {
	return s3LocationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// S3LocationNamespaceLister helps list and get S3Locations.
// All objects returned here must be treated as read-only.
type S3LocationNamespaceLister interface {
	// List lists all S3Locations in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.S3Location, err error)
	// Get retrieves the S3Location from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.S3Location, error)
	S3LocationNamespaceListerExpansion
}

// s3LocationNamespaceLister implements the S3LocationNamespaceLister
// interface.
type s3LocationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all S3Locations in the indexer for a given namespace.
func (s s3LocationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.S3Location, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.S3Location))
	})
	return ret, err
}

// Get retrieves the S3Location from the indexer for a given namespace and name.
func (s s3LocationNamespaceLister) Get(name string) (*v1alpha1.S3Location, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("s3location"), name)
	}
	return obj.(*v1alpha1.S3Location), nil
}
